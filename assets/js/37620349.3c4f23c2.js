"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,g=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1186:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},o="How predictions work",s={unversionedId:"tutorial-basics/how-predictions-work",id:"tutorial-basics/how-predictions-work",title:"How predictions work",description:"All taggers in Flair make predictions. This tutorial helps you understand what information you can get out of each prediction.",source:"@site/docs/tutorial-basics/how-predictions-work.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/how-predictions-work",permalink:"/docs/tutorial-basics/how-predictions-work",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/main/docs/tutorial-basics/how-predictions-work.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/tutorial-basics/basic-types"},next:{title:"Tagging entities",permalink:"/docs/tutorial-basics/tagging-entities"}},l={},c=[{value:"Running example",id:"running-example",level:2},{value:"Getting the predictions",id:"getting-the-predictions",level:2},{value:"Values for each prediction",id:"values-for-each-prediction",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-predictions-work"},"How predictions work"),(0,a.kt)("p",null,"All taggers in Flair make predictions. This tutorial helps you understand what information you can get out of each prediction."),(0,a.kt)("h2",{id:"running-example"},"Running example"),(0,a.kt)("p",null,"Let's use our standard NER example to illustrate how annotations work: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('ner')\n\n# make a sentence\nsentence = Sentence('George Washington went to Washington.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print the sentence with the tags\nprint(sentence)\n")),(0,a.kt)("p",null,"This should print:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'Sentence: "George Washington went to Washington ." \u2192 ["George Washington"/PER, "Washington"/LOC]\n')),(0,a.kt)("p",null,'Showing us that two entities are labeled in this sentence: "George Washington" as PER (person) and "Washington"\nas LOC (location.)'),(0,a.kt)("h2",{id:"getting-the-predictions"},"Getting the predictions"),(0,a.kt)("p",null,"A common question that gets asked is ",(0,a.kt)("strong",{parentName:"p"},"how to access these predictions directly"),". You can do this by using\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"get_labels()")," method to iterate over all predictions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"for label in sentence.get_labels():\n    print(label)\n")),(0,a.kt)("p",null,"This should print the two NER predictions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'Span[0:2]: "George Washington" \u2192 PER (0.9989)\nSpan[4:5]: "Washington" \u2192 LOC (0.9942)\n')),(0,a.kt)("p",null,"As you can see, each entity is printed, together with the predicted class.\nThe confidence of the prediction is indicated as a score in brackets."),(0,a.kt)("h2",{id:"values-for-each-prediction"},"Values for each prediction"),(0,a.kt)("p",null,"For each prediction, you can even ",(0,a.kt)("strong",{parentName:"p"},"directly access")," the label value, it's score and the entity text:  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# iterate over all labels in the sentence\nfor label in sentence.get_labels():\n    # print label value and score\n    print(f'label.value is: \"{label.value}\"')\n    print(f'label.score is: \"{label.score}\"')\n    # access the data point to which label attaches and print its text\n    print(f'the text of label.data_point is: \"{label.data_point.text}\"\\n')\n")),(0,a.kt)("p",null,"This should print: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'label.value is: "PER"\nlabel.score is: "0.998886227607727"\nthe text of label.data_point is: "George Washington"\n\nlabel.value is: "LOC"\nlabel.score is: "0.9942097663879395"\nthe text of label.data_point is: "Washington"\n')))}d.isMDXComponent=!0}}]);