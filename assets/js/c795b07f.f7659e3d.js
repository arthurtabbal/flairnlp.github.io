"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8841],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>u});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var o=a.createContext({}),m=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=m(t.components);return a.createElement(o.Provider,{value:e},t.children)},g="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,o=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),g=m(n),c=i,u=g["".concat(o,".").concat(c)]||g[c]||p[c]||r;return n?a.createElement(u,l(l({ref:e},d),{},{components:n})):a.createElement(u,l({ref:e},d))}));function u(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,l=new Array(r);l[0]=c;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s[g]="string"==typeof t?t:i,l[1]=s;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3460:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:4,description:"Sentiment analysis with Flair"},l="Tagging sentiment",s={unversionedId:"tutorial-basics/tagging-sentiment",id:"tutorial-basics/tagging-sentiment",title:"Tagging sentiment",description:"Sentiment analysis with Flair",source:"@site/docs/tutorial-basics/tagging-sentiment.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/tagging-sentiment",permalink:"/docs/tutorial-basics/tagging-sentiment",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/main/docs/tutorial-basics/tagging-sentiment.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Sentiment analysis with Flair"},sidebar:"tutorialSidebar",previous:{title:"Tagging entities",permalink:"/docs/tutorial-basics/tagging-entities"},next:{title:"Tagging and linking entities",permalink:"/docs/tutorial-basics/entity-linking"}},o={},m=[{value:"Tagging sentiment with our standard model\u200b",id:"tagging-sentiment-with-our-standard-model",level:2},{value:"Tagging sentiment with our fast model",id:"tagging-sentiment-with-our-fast-model",level:2},{value:"List of Sentiment Models",id:"list-of-sentiment-models",level:3}],d={toc:m},g="wrapper";function p(t){let{components:e,...n}=t;return(0,i.kt)(g,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tagging-sentiment"},"Tagging sentiment"),(0,i.kt)("p",null,"This tutorials shows you how to do sentiment analysis in Flair."),(0,i.kt)("h2",{id:"tagging-sentiment-with-our-standard-model"},"Tagging sentiment with our standard model\u200b"),(0,i.kt)("p",null,"Our standard sentiment analysis model uses distilBERT embeddings and was trained over a mix of corpora, notably\nthe Amazon review corpus, and can thus handle a variety of domains and language."),(0,i.kt)("p",null,"Let's use an example sentence:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('sentiment')\n\n# make a sentence\nsentence = Sentence('This movie is not at all bad.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,i.kt)("p",null,"This should print:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[8]: "This movie is not at all bad." \u2192 POSITIVE (0.9929)\n')),(0,i.kt)("p",null,"Showing us that the sentence overall is tagged to be of POSITIVE sentiment. "),(0,i.kt)("h2",{id:"tagging-sentiment-with-our-fast-model"},"Tagging sentiment with our fast model"),(0,i.kt)("p",null,"We also offer an RNN-based variant which is faster but less accurate. Use it like this: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('sentiment-fast')\n\n# make a sentence\nsentence = Sentence('This movie is very bad.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,i.kt)("p",null,"This should print:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[6]: "This movie is very bad." \u2192 NEGATIVE (0.9999)\n')),(0,i.kt)("p",null,"This indicates that the sentence is of NEGATIVE sentiment. As you can see, its the same code as above, just loading the\n'",(0,i.kt)("strong",{parentName:"p"},"sentiment-fast"),"' model instead of '",(0,i.kt)("strong",{parentName:"p"},"sentiment"),"'."),(0,i.kt)("h3",{id:"list-of-sentiment-models"},"List of Sentiment Models"),(0,i.kt)("p",null,"We end this section with a list of all models we currently ship with Flair:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Language"),(0,i.kt)("th",{parentName:"tr",align:null},"Task"),(0,i.kt)("th",{parentName:"tr",align:null},"Training Dataset"),(0,i.kt)("th",{parentName:"tr",align:null},"Accuracy"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'sentiment'"),(0,i.kt)("td",{parentName:"tr",align:null},"English"),(0,i.kt)("td",{parentName:"tr",align:null},"detecting positive and negative sentiment (transformer-based)"),(0,i.kt)("td",{parentName:"tr",align:null},"movie and product reviews"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"98.87"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'sentiment-fast'"),(0,i.kt)("td",{parentName:"tr",align:null},"English"),(0,i.kt)("td",{parentName:"tr",align:null},"detecting positive and negative sentiment (RNN-based)"),(0,i.kt)("td",{parentName:"tr",align:null},"movie and product reviews"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"96.83"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'de-offensive-language'"),(0,i.kt)("td",{parentName:"tr",align:null},"German"),(0,i.kt)("td",{parentName:"tr",align:null},"detecting offensive language"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://projects.fzai.h-da.de/iggsa/projekt/"},"GermEval 2018 Task 1")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"75.71")," (Macro F1)")))))}p.isMDXComponent=!0}}]);