"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5030],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>p});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=d(t),u=a,p=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return t?r.createElement(p,o(o({ref:n},g),{},{components:t})):r.createElement(p,o({ref:n},g))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:5,description:"How to train a sequence tagger"},o="Train a sequence tagger",l={unversionedId:"tutorial-training/how-to-train-sequence-tagger",id:"tutorial-training/how-to-train-sequence-tagger",title:"Train a sequence tagger",description:"How to train a sequence tagger",source:"@site/docs/tutorial-training/how-to-train-sequence-tagger.md",sourceDirName:"tutorial-training",slug:"/tutorial-training/how-to-train-sequence-tagger",permalink:"/docs/tutorial-training/how-to-train-sequence-tagger",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/source/docs/tutorial-training/how-to-train-sequence-tagger.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"How to train a sequence tagger"},sidebar:"tutorialSidebar",previous:{title:"How to load a custom datasetus",permalink:"/docs/tutorial-training/how-to-load-custom-dataset"},next:{title:"Train a text classifier",permalink:"/docs/tutorial-training/how-to-train-text-classifier"}},s={},d=[{value:"Training a Named Entity Recognition (NER) Model with Transformers",id:"training-a-named-entity-recognition-ner-model-with-transformers",level:2},{value:"Training a Named Entity Recognition (NER) Model with Flair Embeddings",id:"training-a-named-entity-recognition-ner-model-with-flair-embeddings",level:2},{value:"Training a Part-of-Speech Tagging Model",id:"training-a-part-of-speech-tagging-model",level:2},{value:"Multi-Dataset Training",id:"multi-dataset-training",level:2}],g={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"train-a-sequence-tagger"},"Train a sequence tagger"),(0,a.kt)("p",null,"Sequence labeling models are used to model problems such as named entity recognition (NER) and\npart-of-speech (PoS) tagging."),(0,a.kt)("p",null,"This tutorial section show you how to train state-of-the-art NER models and other taggers in Flair."),(0,a.kt)("h2",{id:"training-a-named-entity-recognition-ner-model-with-transformers"},"Training a Named Entity Recognition (NER) Model with Transformers"),(0,a.kt)("p",null,"For a state-of-the-art NER sytem you should fine-tune transformer embeddings, and use full document context\n(see our ",(0,a.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2011.06993"},"FLERT")," paper for details). "),(0,a.kt)("p",null,"Use the following script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flair.datasets import CONLL_03\nfrom flair.embeddings import TransformerWordEmbeddings\nfrom flair.models import SequenceTagger\nfrom flair.trainers import ModelTrainer\n\n# 1. get the corpus\ncorpus = CONLL_03()\nprint(corpus)\n\n# 2. what label do we want to predict?\nlabel_type = 'ner'\n\n# 3. make the label dictionary from the corpus\nlabel_dict = corpus.make_label_dictionary(label_type=label_type, add_unk=False)\nprint(label_dict)\n\n# 4. initialize fine-tuneable transformer embeddings WITH document context\nembeddings = TransformerWordEmbeddings(model='xlm-roberta-large',\n                                       layers=\"-1\",\n                                       subtoken_pooling=\"first\",\n                                       fine_tune=True,\n                                       use_context=True,\n                                       )\n\n# 5. initialize bare-bones sequence tagger (no CRF, no RNN, no reprojection)\ntagger = SequenceTagger(hidden_size=256,\n                        embeddings=embeddings,\n                        tag_dictionary=label_dict,\n                        tag_type='ner',\n                        use_crf=False,\n                        use_rnn=False,\n                        reproject_embeddings=False,\n                        )\n\n# 6. initialize trainer\ntrainer = ModelTrainer(tagger, corpus)\n\n# 7. run fine-tuning\ntrainer.fine_tune('resources/taggers/sota-ner-flert',\n                  learning_rate=5.0e-6,\n                  mini_batch_size=4,\n                  mini_batch_chunk_size=1,  # remove this parameter to speed up computation if you have a big GPU\n                  )\n")),(0,a.kt)("p",null,"As you can see, we use 'xlm-roberta-large' embeddings, enable fine-tuning and set ",(0,a.kt)("inlineCode",{parentName:"p"},"use_context")," to True.\nWe also deactivate the RNN, CRF and reprojection in the ",(0,a.kt)("inlineCode",{parentName:"p"},"SequenceTagger"),". This is because the\ntransformer is so powerful that it does not need these components. We then fine-tune the model with a very small\nlearning rate on the corpus."),(0,a.kt)("p",null,"This will give you state-of-the-art numbers similar to the ones reported\nin ",(0,a.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2011.06993"},"Schweter and Akbik (2021)"),". "),(0,a.kt)("h2",{id:"training-a-named-entity-recognition-ner-model-with-flair-embeddings"},"Training a Named Entity Recognition (NER) Model with Flair Embeddings"),(0,a.kt)("p",null,"Alternatively to fine-tuning a very large transformer, you can use a classic training setup without fine-tuning.\nIn the classic setup, you learn a LSTM-CRF on top of frozen embeddings. We typically use a 'stack' that combines\nFlair and GloVe embeddings:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flair.datasets import CONLL_03\nfrom flair.embeddings import WordEmbeddings, FlairEmbeddings, StackedEmbeddings\nfrom flair.models import SequenceTagger\nfrom flair.trainers import ModelTrainer\n\n# 1. get the corpus\ncorpus = CONLL_03()\nprint(corpus)\n\n# 2. what label do we want to predict?\nlabel_type = 'ner'\n\n# 3. make the label dictionary from the corpus\nlabel_dict = corpus.make_label_dictionary(label_type=label_type, add_unk=False)\nprint(label_dict)\n\n# 4. initialize embedding stack with Flair and GloVe\nembedding_types = [\n    WordEmbeddings('glove'),\n    FlairEmbeddings('news-forward'),\n    FlairEmbeddings('news-backward'),\n]\n\nembeddings = StackedEmbeddings(embeddings=embedding_types)\n\n# 5. initialize sequence tagger\ntagger = SequenceTagger(hidden_size=256,\n                        embeddings=embeddings,\n                        tag_dictionary=label_dict,\n                        tag_type=label_type)\n\n# 6. initialize trainer\ntrainer = ModelTrainer(tagger, corpus)\n\n# 7. start training\ntrainer.train('resources/taggers/sota-ner-flair',\n              learning_rate=0.1,\n              mini_batch_size=32,\n              max_epochs=150)\n")),(0,a.kt)("p",null,"This will give you state-of-the-art numbers similar to the ones reported in ",(0,a.kt)("a",{parentName:"p",href:"https://aclanthology.org/C18-1139.pdf"},"Akbik et al. (2018)"),".\nThe numbers are not quite as high as fine-tuning transformers, but it requires less GPU memory and depending on your\nsetup may run faster in the end. "),(0,a.kt)("h2",{id:"training-a-part-of-speech-tagging-model"},"Training a Part-of-Speech Tagging Model"),(0,a.kt)("p",null,"If you want to train a part-of-speech model instead of NER, simply exchange the corpus and the label type: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flair.datasets import UD_ENGLISH\nfrom flair.embeddings import WordEmbeddings, StackedEmbeddings, FlairEmbeddings\nfrom flair.models import SequenceTagger\nfrom flair.trainers import ModelTrainer\n\n# 1. get the corpus\ncorpus = UD_ENGLISH()\nprint(corpus)\n\n# 2. what label do we want to predict?\nlabel_type = 'upos'\n\n# 3. make the label dictionary from the corpus\nlabel_dict = corpus.make_label_dictionary(label_type=label_type)\nprint(label_dict)\n\n# 4. initialize embeddings\nembedding_types = [\n    WordEmbeddings('glove'),\n    FlairEmbeddings('news-forward'),\n    FlairEmbeddings('news-backward'),\n]\n\nembeddings = StackedEmbeddings(embeddings=embedding_types)\n\n# 5. initialize sequence tagger\ntagger = SequenceTagger(hidden_size=256,\n                        embeddings=embeddings,\n                        tag_dictionary=label_dict,\n                        tag_type=label_type,\n                        use_crf=True)\n\n# 6. initialize trainer\ntrainer = ModelTrainer(tagger, corpus)\n\n# 7. start training\ntrainer.train('resources/taggers/example-upos',\n              learning_rate=0.1,\n              mini_batch_size=32)\n")),(0,a.kt)("p",null,"This script will give you the state-of-the-art accuracy reported in ",(0,a.kt)("a",{parentName:"p",href:"https://aclanthology.org/C18-1139.pdf"},"Akbik et al. (2018)"),"."),(0,a.kt)("h2",{id:"multi-dataset-training"},"Multi-Dataset Training"),(0,a.kt)("p",null,"Now, let us train a single model that can PoS tag text in both English and German. To do this, we load both the English\nand German UD corpora and create a MultiCorpus object. We also use the new multilingual Flair embeddings for this task."),(0,a.kt)("p",null,"All the rest is same as before, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flair.data import MultiCorpus\nfrom flair.datasets import UD_ENGLISH, UD_GERMAN\nfrom flair.embeddings import FlairEmbeddings, StackedEmbeddings\nfrom flair.models import SequenceTagger\nfrom flair.trainers import ModelTrainer\n\n# 1. get the corpora - English and German UD\ncorpus = MultiCorpus([UD_ENGLISH(), UD_GERMAN()]).downsample(0.1)\n\n# 2. what label do we want to predict?\nlabel_type = 'upos'\n\n# 3. make the label dictionary from the corpus\nlabel_dict = corpus.make_label_dictionary(label_type=label_type)\nprint(label_dict)\n\n# 4. initialize embeddings\nembedding_types = [\n\n    # we use multilingual Flair embeddings in this task\n    FlairEmbeddings('multi-forward'),\n    FlairEmbeddings('multi-backward'),\n]\n\nembeddings = StackedEmbeddings(embeddings=embedding_types)\n\n# 5. initialize sequence tagger\ntagger = SequenceTagger(hidden_size=256,\n                        embeddings=embeddings,\n                        tag_dictionary=label_dict,\n                        tag_type=label_type,\n                        use_crf=True)\n\n# 6. initialize trainer\ntrainer = ModelTrainer(tagger, corpus)\n\n# 7. start training\ntrainer.train('resources/taggers/example-universal-pos',\n              learning_rate=0.1,\n              mini_batch_size=32,\n              max_epochs=150,\n              )\n")),(0,a.kt)("p",null,"This gives you a multilingual model. Try experimenting with more languages!"))}m.isMDXComponent=!0}}]);