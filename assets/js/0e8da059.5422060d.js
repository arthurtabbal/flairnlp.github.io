"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8070],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>f});var n=a(7294);function o(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function r(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){o(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,n,o=function(t,e){if(null==t)return{};var a,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(o[a]=t[a]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(o[a]=t[a])}return o}var l=n.createContext({}),d=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):r(r({},e),t)),a},c=function(t){var e=d(t.components);return n.createElement(l.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),p=d(a),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return a?n.createElement(f,r(r({ref:e},c),{},{components:a})):n.createElement(f,r({ref:e},c))}));function f(t,e){var a=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=a.length,r=new Array(i);r[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[p]="string"==typeof t?t:o,r[1]=s;for(var d=2;d<i;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2147:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(7462),o=(a(7294),a(3905));const i={sidebar_position:5,description:"Load a custom dataset"},r="How to load a custom dataset",s={unversionedId:"tutorial-training/how-to-load-custom-dataset",id:"tutorial-training/how-to-load-custom-dataset",title:"How to load a custom dataset",description:"Load a custom dataset",source:"@site/docs/tutorial-training/how-to-load-custom-dataset.md",sourceDirName:"tutorial-training",slug:"/tutorial-training/how-to-load-custom-dataset",permalink:"/docs/tutorial-training/how-to-load-custom-dataset",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/main/docs/tutorial-training/how-to-load-custom-dataset.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Load a custom dataset"},sidebar:"tutorialSidebar",previous:{title:"How to load a prepared dataset",permalink:"/docs/tutorial-training/how-to-load-prepared-dataset"},next:{title:"Train a sequence tagger",permalink:"/docs/tutorial-training/how-to-train-sequence-tagger"}},l={},d=[{value:"Reading a dataset in column format",id:"reading-a-dataset-in-column-format",level:2},{value:"Reading a text classification dataset",id:"reading-a-text-classification-dataset",level:2},{value:"Load from simple CSV file",id:"load-from-simple-csv-file",level:4},{value:"FastText format",id:"fasttext-format",level:4}],c={toc:d},p="wrapper";function u(t){let{components:e,...a}=t;return(0,o.kt)(p,(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-load-a-custom-dataset"},"How to load a custom dataset"),(0,o.kt)("p",null,"This part of the tutorial shows how you can load a corpus for training a model. "),(0,o.kt)("h2",{id:"reading-a-dataset-in-column-format"},"Reading a dataset in column format"),(0,o.kt)("p",null,"In cases you want to train over a sequence labeling dataset that is not in the above list, you can load them with the ColumnCorpus object.\nMost sequence labeling datasets in NLP use some sort of column format in which each line is a word and each column is\none level of linguistic annotation. See for instance this sentence:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"George N B-PER\nWashington N I-PER\nwent V O\nto P O\nWashington N B-LOC\n\nSam N B-PER\nHouston N I-PER\nstayed V O\nhome N O\n")),(0,o.kt)("p",null,"The first column is the word itself, the second coarse PoS tags, and the third BIO-annotated NER tags. Empty line separates sentences. To read such a\ndataset, define the column structure as a dictionary and instantiate a ",(0,o.kt)("inlineCode",{parentName:"p"},"ColumnCorpus"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from flair.data import Corpus\nfrom flair.datasets import ColumnCorpus\n\n# define columns\ncolumns = {0: 'text', 1: 'pos', 2: 'ner'}\n\n# this is the folder in which train, test and dev files reside\ndata_folder = '/path/to/data/folder'\n\n# init a corpus using column format, data folder and the names of the train, dev and test files\ncorpus: Corpus = ColumnCorpus(data_folder, columns,\n                              train_file='train.txt',\n                              test_file='test.txt',\n                              dev_file='dev.txt')\n\n")),(0,o.kt)("p",null,"This gives you a ",(0,o.kt)("inlineCode",{parentName:"p"},"Corpus")," object that contains the train, dev and test splits, each has a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"Sentence"),".\nSo, to check how many sentences there are in the training split, do"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"len(corpus.train)\n")),(0,o.kt)("p",null,"You can also access a sentence and check out annotations. Lets assume that the training split is\nread from the example above, then executing these commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(corpus.train[0].to_tagged_string('ner'))\nprint(corpus.train[1].to_tagged_string('pos'))\n")),(0,o.kt)("p",null,"will print the sentences with different layers of annotation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"George <B-PER> Washington <I-PER> went to Washington <B-LOC> .\n\nSam <N> Houston <N> stayed <V> home <N>\n")),(0,o.kt)("h2",{id:"reading-a-text-classification-dataset"},"Reading a text classification dataset"),(0,o.kt)("p",null,"If you want to use your own text classification dataset, there are currently two methods to go about this:\nload specified text and labels from a simple CSV file or format your data to the\n",(0,o.kt)("a",{parentName:"p",href:"https://fasttext.cc/docs/en/supervised-tutorial.html"},"FastText format"),"."),(0,o.kt)("h4",{id:"load-from-simple-csv-file"},"Load from simple CSV file"),(0,o.kt)("p",null,"Many text classification datasets are distributed as simple CSV files in which each row corresponds to a data point and\ncolumns correspond to text, labels, and other metadata.  You can load a CSV format classification dataset using\n",(0,o.kt)("inlineCode",{parentName:"p"},"CSVClassificationCorpus")," by passing in a column format (like in ",(0,o.kt)("inlineCode",{parentName:"p"},"ColumnCorpus")," above).  This column format indicates\nwhich column(s) in the CSV holds the text and which field(s) the label(s). By default, Python's CSV library assumes that\nyour files are in Excel CSV format, but ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/csv.html#csv-fmt-params"},"you can specify additional parameters"),"\nif you use custom delimiters or quote characters."),(0,o.kt)("p",null,"Note: You will need to save your split CSV data files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"data_folder")," path with each file titled appropriately i.e.\n",(0,o.kt)("inlineCode",{parentName:"p"},"train.csv")," ",(0,o.kt)("inlineCode",{parentName:"p"},"test.csv")," ",(0,o.kt)("inlineCode",{parentName:"p"},"dev.csv"),".   This is because the corpus initializers will automatically search for the train,\ndev, test splits in a folder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from flair.data import Corpus\nfrom flair.datasets import CSVClassificationCorpus\n\n# this is the folder in which train, test and dev files reside\ndata_folder = \'/path/to/data\'\n\n# column format indicating which columns hold the text and label(s)\ncolumn_name_map = {4: "text", 1: "label_topic", 2: "label_subtopic"}\n\n# load corpus containing training, test and dev data and if CSV has a header, you can skip it\ncorpus: Corpus = CSVClassificationCorpus(data_folder,\n                                         column_name_map,\n                                         skip_header=True,\n                                         delimiter=\'\\t\',    # tab-separated files\n)\n')),(0,o.kt)("h4",{id:"fasttext-format"},"FastText format"),(0,o.kt)("p",null,"If using ",(0,o.kt)("inlineCode",{parentName:"p"},"CSVClassificationCorpus")," is not practical, you may format your data to the FastText format, in which each line in the file represents a text document. A document can have one or multiple labels that are defined at the beginning of the line starting with the prefix ",(0,o.kt)("inlineCode",{parentName:"p"},"__label__"),". This looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"__label__<label_1> <text>\n__label__<label_1> __label__<label_2> <text>\n")),(0,o.kt)("p",null,"As previously mentioned, to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Corpus")," for a text classification task, you need to have three files (train, dev, and test) in the\nabove format located in one folder. This data folder structure could, for example, look like this for the IMDB task:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"/resources/tasks/imdb/train.txt\n/resources/tasks/imdb/dev.txt\n/resources/tasks/imdb/test.txt\n")),(0,o.kt)("p",null,"Now create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ClassificationCorpus")," by pointing to this folder (",(0,o.kt)("inlineCode",{parentName:"p"},"/resources/tasks/imdb"),").\nThereby, each line in a file is converted to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Sentence")," object annotated with the labels."),(0,o.kt)("p",null,"Attention: A text in a line can have multiple sentences. Thus, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Sentence")," object can actually consist of multiple\nsentences."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from flair.data import Corpus\nfrom flair.datasets import ClassificationCorpus\n\n# this is the folder in which train, test and dev files reside\ndata_folder = '/path/to/data/folder'\n\n# load corpus containing training, test and dev data\ncorpus: Corpus = ClassificationCorpus(data_folder,\n                                      test_file='test.txt',\n                                      dev_file='dev.txt',\n                                      train_file='train.txt',\n                                      label_type='topic',\n                                      )\n")),(0,o.kt)("p",null,"Note again that our corpus initializers have methods to automatically look for train, dev and test splits in a folder. So in\nmost cases you don't need to specify the file names yourself. Often, this is enough:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# this is the folder in which train, test and dev files reside\ndata_folder = '/path/to/data/folder'\n\n# load corpus by pointing to folder. Train, dev and test gets identified automatically.\ncorpus: Corpus = ClassificationCorpus(data_folder,\n                                      label_type='topic',\n                                      )\n")),(0,o.kt)("p",null,"Since the FastText format does not have columns, you must manually define a name for the annotations. In this\nexample we chose ",(0,o.kt)("inlineCode",{parentName:"p"},"label_type='topic'")," to denote that we are loading a corpus with topic labels."))}u.isMDXComponent=!0}}]);