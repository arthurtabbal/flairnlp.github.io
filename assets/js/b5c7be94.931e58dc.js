"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2011],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),g=i,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||r;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:5,description:"How to do entity linking in Flair"},l="Tagging and linking entities",o={unversionedId:"tutorial-basics/entity-linking",id:"tutorial-basics/entity-linking",title:"Tagging and linking entities",description:"How to do entity linking in Flair",source:"@site/docs/tutorial-basics/entity-linking.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/entity-linking",permalink:"/docs/tutorial-basics/entity-linking",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/main/docs/tutorial-basics/entity-linking.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"How to do entity linking in Flair"},sidebar:"tutorialSidebar",previous:{title:"Tagging sentiment",permalink:"/docs/tutorial-basics/tagging-sentiment"},next:{title:"Tagging parts-of-speech",permalink:"/docs/tutorial-basics/part-of-speech-tagging"}},s={},c=[{value:"Understanding and Accessing Annotations (important!)",id:"understanding-and-accessing-annotations-important",level:2},{value:"Tagging a Whole Text Corpus",id:"tagging-a-whole-text-corpus",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tagging-and-linking-entities"},"Tagging and linking entities"),(0,i.kt)("p",null,"As of Flair 0.12 we ship an ",(0,i.kt)("strong",{parentName:"p"},"experimental entity linker")," trained on the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/flairNLP/zelda"},"Zelda dataset"),". The linker does not only\ntag entities, but also attempts to link each entity to the corresponding Wikipedia URL if one exists. "),(0,i.kt)("p",null,'To illustrate, let\'s use a short example text with two mentions of "Barcelona". The first refers to the football club\n"FC Barcelona", the second to the city "Barcelona".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('linker')\n\n# make a sentence\nsentence = Sentence('Bayern played against Barcelona. The match took place in Barcelona.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,i.kt)("p",null,"This should print:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[12]: "Bayern played against Barcelona. The match took place in Barcelona." \u2192 ["Bayern"/FC_Bayern_Munich, "Barcelona"/FC_Barcelona, "Barcelona"/Barcelona]\n')),(0,i.kt)("p",null,'As we can see, the linker can resolve what the two mentions of "Barcelona" refer to: '),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'the first mention "Barcelona" is linked to "FC_Barcelona" '),(0,i.kt)("li",{parentName:"ul"},'the second mention "Barcelona" is linked to "Barcelona"')),(0,i.kt)("p",null,'Additionally, the mention "Bayern" is linked to "FC_Bayern_Munich", telling us that here the football club is meant.'),(0,i.kt)("h2",{id:"understanding-and-accessing-annotations-important"},"Understanding and Accessing Annotations (important!)"),(0,i.kt)("p",null,"You can access each prediction individually using the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_labels()")," method. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('linker')\n\n# make a sentence\nsentence = Sentence('Bayern played against Barcelona. The match took place in Barcelona.')\n\n# predict NER tags\ntagger.predict(sentence)\n")),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_labels()")," method to iterate over all predictions. Direct access each label's value (predicted tag)\nand its confidence score."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Use the `get_labels()` method to iterate over all predictions. \nfor label in sentence.get_labels():\n    print(label)\n    # print label value and score\n    print(f'label.value is: \"{label.value}\"')\n    print(f'label.score is: \"{label.score}\"')\n")),(0,i.kt)("p",null,"This should print:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'Span[0:1]: "Bayern" \u2192 FC_Bayern_Munich (0.7778)\nlabel.value is: "FC_Bayern_Munich"\nlabel.score is: "0.7777503132820129"\n\nSpan[3:4]: "Barcelona" \u2192 FC_Barcelona (0.9983)\nlabel.value is: "FC_Barcelona"\nlabel.score is: "0.9983417987823486"\n\nSpan[10:11]: "Barcelona" \u2192 Barcelona (1.0)\nlabel.value is: "Barcelona"\nlabel.score is: "0.999983549118042"\n')),(0,i.kt)("h2",{id:"tagging-a-whole-text-corpus"},"Tagging a Whole Text Corpus"),(0,i.kt)("p",null,"Often, you may want to tag an entire text corpus. In this case, you need to split the corpus into sentences and pass a\nlist of ",(0,i.kt)("inlineCode",{parentName:"p"},"Sentence")," objects to the ",(0,i.kt)("inlineCode",{parentName:"p"},".predict()")," method."),(0,i.kt)("p",null,"For instance, you can use the sentence splitter of segtok to split your text:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.splitter import SegtokSentenceSplitter\n\n# example text with many sentences\ntext = \"Bayern played against Barcelona. The match took place in Barcelona.\"\n\n# initialize sentence splitter\nsplitter = SegtokSentenceSplitter()\n\n# use splitter to split text into list of sentences\nsentences = splitter.split(text)\n\n# predict tags for sentences\ntagger = Classifier.load('linker')\ntagger.predict(sentences)\n\n# iterate through sentences and print predicted labels\nfor sentence in sentences:\n    print(sentence)\n")),(0,i.kt)("p",null,"This should print: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[5]: "Bayern played against Barcelona." \u2192 ["Bayern"/FC_Bayern_Munich, "Barcelona"/FC_Barcelona]\nSentence[7]: "The match took place in Barcelona." \u2192 ["Barcelona"/Barcelona]\n')),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"mini_batch_size")," parameter of the ",(0,i.kt)("inlineCode",{parentName:"p"},".predict()")," method, you can set the size of mini batches passed to the\ntagger. Depending on your resources, you might want to play around with this parameter to optimize speed."))}u.isMDXComponent=!0}}]);