"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,r=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(n),d=l,k=h["".concat(r,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(k,s(s({ref:t},p),{},{components:n})):a.createElement(k,s({ref:t},p))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var r in t)hasOwnProperty.call(t,r)&&(i[r]=t[r]);i.originalType=e,i[h]="string"==typeof e?e:l,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const o={sidebar_position:1,description:"Brief illustration of the most important basic concepts in Flair"},s="Basics",i={unversionedId:"tutorial-basics/basic-types",id:"tutorial-basics/basic-types",title:"Basics",description:"Brief illustration of the most important basic concepts in Flair",source:"@site/docs/tutorial-basics/basic-types.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/basic-types",permalink:"/docs/tutorial-basics/basic-types",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/source/docs/tutorial-basics/basic-types.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Brief illustration of the most important basic concepts in Flair"},sidebar:"tutorialSidebar",previous:{title:"Tutorial 1: Basic Tagging",permalink:"/docs/category/tutorial-1-basic-tagging"},next:{title:"How predictions work",permalink:"/docs/tutorial-basics/how-predictions-work"}},r={},c=[{value:"What is a Sentence",id:"what-is-a-sentence",level:2},{value:"Iterating over the tokens in a Sentence",id:"iterating-over-the-tokens-in-a-sentence",level:3},{value:"Directly accessing a token",id:"directly-accessing-a-token",level:3},{value:"Tokenization",id:"tokenization",level:3},{value:"What is a Label",id:"what-is-a-label",level:2},{value:"Example 1: Labeling a token in a sentence",id:"example-1-labeling-a-token-in-a-sentence",level:3},{value:"Example 2: Labeling a whole sentence",id:"example-2-labeling-a-whole-sentence",level:3},{value:"Multiple labels",id:"multiple-labels",level:3},{value:"Accessing labels",id:"accessing-labels",level:3},{value:"Information for each label",id:"information-for-each-label",level:3}],p={toc:c},h="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"basics"},"Basics"),(0,l.kt)("p",null,"This tutorial explains the basic concepts used in Flair:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"what is a ",(0,l.kt)("inlineCode",{parentName:"li"},"Sentence")),(0,l.kt)("li",{parentName:"ul"},"what is a ",(0,l.kt)("inlineCode",{parentName:"li"},"Label"))),(0,l.kt)("p",null,"You should be familiar with these two concepts in order to get the most out of Flair."),(0,l.kt)("h2",{id:"what-is-a-sentence"},"What is a Sentence"),(0,l.kt)("p",null,"If you want to tag a sentence, you need to first make a ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," object for it. "),(0,l.kt)("p",null,'For example, say you want to tag the text "',(0,l.kt)("em",{parentName:"p"},"The grass is green."),'". '),(0,l.kt)("p",null,"Let's start by making a ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," object for this sentence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# The sentence objects holds a sentence that we may want to embed or tag\nfrom flair.data import Sentence\n\n# Make a sentence object by passing a string\nsentence = Sentence('The grass is green.')\n\n# Print the object to see what's in there\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[5]: "The grass is green."\n')),(0,l.kt)("p",null,"The print-out tells us that the sentence consists of 5 tokens. "),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"A ",(0,l.kt)("em",{parentName:"p"},"token"),' is an atomic unit of the text, often a word or punctuation. The printout is therefore telling us that the sentence\n"',(0,l.kt)("em",{parentName:"p"},"The grass is green."),'" consists of 5 such atomic units. ')),(0,l.kt)("h3",{id:"iterating-over-the-tokens-in-a-sentence"},"Iterating over the tokens in a Sentence"),(0,l.kt)("p",null,"So what are the 5 tokens in this example sentence? "),(0,l.kt)("p",null,"You can iterate over all tokens in a sentence like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for token in sentence:\n    print(token)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[0]: "The"\nToken[1]: "grass"\nToken[2]: "is"\nToken[3]: "green"\nToken[4]: "."\n')),(0,l.kt)("p",null,'This printout is telling us that the 5 tokens in the text are the words "',(0,l.kt)("em",{parentName:"p"},"The"),'", "',(0,l.kt)("em",{parentName:"p"},"grass"),'", "',(0,l.kt)("em",{parentName:"p"},"is"),'", "',(0,l.kt)("em",{parentName:"p"},"green"),'", with a separate token for the full stop at the end.\nThe tokens therefore correspond to the words and the punctuation of the text.'),(0,l.kt)("h3",{id:"directly-accessing-a-token"},"Directly accessing a token"),(0,l.kt)("p",null,"You can access the tokens of a sentence via their token id or with their index:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# using the token id\nprint(sentence.get_token(4))\n# using the index itself\nprint(sentence[3])\n")),(0,l.kt)("p",null,"which should print in both cases"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[3]: "green"\n')),(0,l.kt)("p",null,'This print-out includes the token index (3) and the lexical value of the token ("green"). '),(0,l.kt)("h3",{id:"tokenization"},"Tokenization"),(0,l.kt)("p",null,"When you create a ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," as above, the text is automatically tokenized (segmented into words)\nusing the ",(0,l.kt)("a",{parentName:"p",href:"https://pypi.org/project/segtok/"},"segtok")," library."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can also use a different tokenizer if you like. To learn more about this, check out our tokenization tutorial.")),(0,l.kt)("h2",{id:"what-is-a-label"},"What is a Label"),(0,l.kt)("p",null,"All Flair models predict labels. For instance, our sentiment analysis models will predict labels for a\nsentence. Our NER models will predict labels for tokens in a sentence. "),(0,l.kt)("h3",{id:"example-1-labeling-a-token-in-a-sentence"},"Example 1: Labeling a token in a sentence"),(0,l.kt)("p",null,"To illustrate how labels work, let's use the same example sentence as above: \"",(0,l.kt)("em",{parentName:"p"},"The grass is green."),'". '),(0,l.kt)("p",null,'Let us label all "color words" in this sentence. Since the sentence contains only one color word (namely "green"),\nwe only need to add a label to one of the tokens. '),(0,l.kt)("p",null,"We access token 3 in the sentence, and set a label for it: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Make a sentence object by passing a string\nsentence = Sentence('The grass is green.')\n\n# add an NER tag to token 3 in the sentence\nsentence[3].add_label('ner', 'color')\n\n# print the sentence (now with this annotation)\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence: "The grass is green ." \u2192 ["green"/color]\n')),(0,l.kt)("p",null,'The output indicates that the word "green" in this sentence is labeled as a "color". You can also\niterate through each token and print it to see if it has labels:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for token in sentence:\n    print(token)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[0]: "The"\nToken[1]: "grass"\nToken[2]: "is"\nToken[3]: "green" \u2192 color (1.0)\nToken[4]: "."\n')),(0,l.kt)("p",null,"This shows that there are 5 tokens in the sentence, one of which has a label."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"add_label")," method used here has two mandatory parameters: A ",(0,l.kt)("inlineCode",{parentName:"p"},"tag_type")," that ...")),(0,l.kt)("h3",{id:"example-2-labeling-a-whole-sentence"},"Example 2: Labeling a whole sentence"),(0,l.kt)("p",null,"Sometimes you want to label an entire sentence instead of only a token. Do this by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"add_label")," for the whole sentence."),(0,l.kt)("p",null,'For example, say we want to add a sentiment label to the sentence "',(0,l.kt)("em",{parentName:"p"},"The grass is green."),'": '),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('The grass is green.')\n\n# add a label to a sentence\nsentence.add_label('sentiment', 'POSITIVE')\n\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[5]: "The grass is green." \u2192 POSITIVE (1.0)\n')),(0,l.kt)("p",null,"Indicating that this sentence is now labeled as having a positive sentiment."),(0,l.kt)("h3",{id:"multiple-labels"},"Multiple labels"),(0,l.kt)("p",null,"Importantly, in Flair you can add as many labels to a sentence as you like. "),(0,l.kt)("p",null,"Let's bring the two examples above together: We will label the sentence \"",(0,l.kt)("em",{parentName:"p"},"The grass is green."),'" with an overall positive sentiment, and also add a "color" tag to the token "',(0,l.kt)("em",{parentName:"p"},"grass"),'":'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('The grass is green.')\n\n# add a sentiment label to the sentence\nsentence.add_label('sentiment', 'POSITIVE')\n\n# add an NER tag to token 3 in the sentence\nsentence[3].add_label('ner', 'color')\n\n# print the sentence with all annotations\nprint(sentence)\n")),(0,l.kt)("p",null,"This will print: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[5]: "The grass is green." \u2192 POSITIVE (1.0) \u2192 ["green"/color]\n')),(0,l.kt)("p",null,"Indicating that the sentence is now labeled with two different types of information. "),(0,l.kt)("h3",{id:"accessing-labels"},"Accessing labels"),(0,l.kt)("p",null,"You can iterate through all labels of a sentence using the ",(0,l.kt)("inlineCode",{parentName:"p"},".get_labels()")," method: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# iterate over all labels and print\nfor label in sentence.get_labels():\n    print(label)\n")),(0,l.kt)("p",null,"This will get each label and print it. For instance, let's re-use the previous example in which\nwe add two different labels to the same sentence:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('The grass is green.')\n\n# add a sentiment label to the sentence\nsentence.add_label('sentiment', 'POSITIVE')\n\n# add an NER tag to token 3 in the sentence\nsentence[3].add_label('ner', 'color')\n\n# iterate over all labels and print\nfor label in sentence.get_labels():\n    print(label)\n")),(0,l.kt)("p",null,"This will now print the following two lines: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[5]: "The grass is green." \u2192 POSITIVE (1.0)\nToken[3]: "green" \u2192 color (1.0)\n')),(0,l.kt)("p",null,'This printout tells us that there are two labels: The first is for the whole sentence, tagged as POSITIVE. The second is only for the token "',(0,l.kt)("em",{parentName:"p"},"green"),'", tagged as "color".'),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If you only want to iterate over labels of a specific type, add the label name as parameter to get_labels(). For instance, to only iterate over all NER labels, do: "),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# iterate over all NER labels only\nfor label in sentence.get_labels('ner'):\n    print(label)\n"))),(0,l.kt)("h3",{id:"information-for-each-label"},"Information for each label"),(0,l.kt)("p",null,"Each label is of class ",(0,l.kt)("inlineCode",{parentName:"p"},"Label")," which next to the value has a score indicating confidence. It also has a pointer back to the data point to which it attaches. "),(0,l.kt)("p",null,"This means that you can print the value, the confidence and the labeled text of each label: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('The grass is green.')\n\n# add an NER tag to token 3 in the sentence\nsentence[3].add_label('ner', 'color')\n\n# iterate over all labels and print\nfor label in sentence.get_labels():\n\n    # Print the text, the label value and the label score\n    print(f'\"{label.data_point.text}\" is classified as \"{label.value}\" with score {label.score}')\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'"green" is classified as "color" with score 1.0\n')),(0,l.kt)("p",null,"Our color tag has a score of 1.0 since we manually added it. If a tag is predicted by our\nsequence labeler, the score value will indicate classifier confidence."))}u.isMDXComponent=!0}}]);