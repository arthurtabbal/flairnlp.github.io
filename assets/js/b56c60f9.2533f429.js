"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8257],{3905:(t,e,n)=>{n.d(e,{Zo:()=>g,kt:()=>m});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},g=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},c="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,g=s(t,["components","mdxType","originalType","parentName"]),c=p(n),d=r,m=c["".concat(o,".").concat(d)]||c[d]||u[d]||l;return n?a.createElement(m,i(i({ref:e},g),{},{components:n})):a.createElement(m,i({ref:e},g))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s[c]="string"==typeof t?t:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4348:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:6,description:"How to do part-of-speech tagging in Flair"},i="Tagging parts-of-speech",s={unversionedId:"tutorial-basics/part-of-speech-tagging",id:"tutorial-basics/part-of-speech-tagging",title:"Tagging parts-of-speech",description:"How to do part-of-speech tagging in Flair",source:"@site/docs/tutorial-basics/part-of-speech-tagging.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/part-of-speech-tagging",permalink:"/docs/tutorial-basics/part-of-speech-tagging",draft:!1,editUrl:"https://github.com/flairNLP/flairnlp.github.io/edit/source/docs/tutorial-basics/part-of-speech-tagging.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"How to do part-of-speech tagging in Flair"},sidebar:"tutorialSidebar",previous:{title:"Tagging and linking entities",permalink:"/docs/tutorial-basics/entity-linking"},next:{title:"How to tag a whole corpus",permalink:"/docs/tutorial-basics/how-to-tag-corpus"}},o={},p=[{value:"Tagging Universal Parts-of-Speech (UPOS)",id:"tagging-universal-parts-of-speech-upos",level:2},{value:"Tagging Universal Parts-of-Speech (UPOS) in Multilingual Text",id:"tagging-universal-parts-of-speech-upos-in-multilingual-text",level:2},{value:"Tagging Language-Specific Parts-of-Speech (POS) in English",id:"tagging-language-specific-parts-of-speech-pos-in-english",level:2},{value:"Tagging Language-Specific Parts-of-Speech (POS) in Other Languages",id:"tagging-language-specific-parts-of-speech-pos-in-other-languages",level:2},{value:"... in German",id:"-in-german",level:3},{value:"... in Ukrainian",id:"-in-ukrainian",level:3},{value:"... in Arabic",id:"-in-arabic",level:3},{value:"Understanding and Accessing Annotations (important!)",id:"understanding-and-accessing-annotations-important",level:2},{value:"Tagging a Whole Text Corpus",id:"tagging-a-whole-text-corpus",level:2},{value:"List of POS Models",id:"list-of-pos-models",level:2}],g={toc:p},c="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tagging-parts-of-speech"},"Tagging parts-of-speech"),(0,r.kt)("h2",{id:"tagging-universal-parts-of-speech-upos"},"Tagging Universal Parts-of-Speech (UPOS)"),(0,r.kt)("p",null,"Universal parts-of-speech are a set of minimal syntactic units that exist across languages. For instance, most languages\nwill have VERBs or NOUNs. "),(0,r.kt)("p",null,"To tag upos in ",(0,r.kt)("strong",{parentName:"p"},"English"),", do: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('upos')\n\n# make a sentence\nsentence = Sentence('Dirk went to the store.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,r.kt)("p",null,"This should print:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[6]: "Dirk went to the store." \u2192 ["Dirk"/PROPN, "went"/VERB, "to"/ADP, "the"/DET, "store"/NOUN, "."/PUNCT]\n')),(0,r.kt)("p",null,'This indicates for instance that "went" is a VERB and that "store" is a NOUN.'),(0,r.kt)("h2",{id:"tagging-universal-parts-of-speech-upos-in-multilingual-text"},"Tagging Universal Parts-of-Speech (UPOS) in Multilingual Text"),(0,r.kt)("p",null,"We ship models trained over 14 langages to tag upos in ",(0,r.kt)("strong",{parentName:"p"},"multilingual text"),". Use like this: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load model\ntagger = Classifier.load('pos-multi')\n\n# text with English and German sentences\nsentence = Sentence('George Washington went to Washington. Dort kaufte er einen Hut.')\n\n# predict PoS tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,r.kt)("p",null,"This should print (line breaks added for readability):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'Sentence: "George Washington went to Washington . Dort kaufte er einen Hut ."\n\n\u2192 ["George"/PROPN, "Washington"/PROPN, "went"/VERB, "to"/ADP, "Washington"/PROPN, "."/PUNCT]\n\n\u2192 ["Dort"/ADV, "kaufte"/VERB, "er"/PRON, "einen"/DET, "Hut"/NOUN, "."/PUNCT]\n')),(0,r.kt)("p",null,"However note that they were trained for a mix of European languages and therefore will not work for other languages."),(0,r.kt)("h2",{id:"tagging-language-specific-parts-of-speech-pos-in-english"},"Tagging Language-Specific Parts-of-Speech (POS) in English"),(0,r.kt)("p",null,"Language-specific parts-of-speech are more fine-grained. For English, we offer several models trained over Ontonotes. "),(0,r.kt)("p",null,"Use like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('pos')\n\n# make a sentence\nsentence = Sentence('Dirk went to the store.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,r.kt)("p",null,"This should print:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[6]: "Dirk went to the store." \u2192 ["Dirk"/NNP, "went"/VBD, "to"/IN, "the"/DT, "store"/NN, "."/.]\n')),(0,r.kt)("p",null,"Look at the tag specification of the Penn Treebank to better understand what these tags mean. "),(0,r.kt)("h2",{id:"tagging-language-specific-parts-of-speech-pos-in-other-languages"},"Tagging Language-Specific Parts-of-Speech (POS) in Other Languages"),(0,r.kt)("p",null,"We ship with language-specific part-of-speech models for several languages. For instance:"),(0,r.kt)("h3",{id:"-in-german"},"... in German"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('de-pos')\n\n# make a sentence\nsentence = Sentence('Dort hatte er einen Hut gekauft.')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,r.kt)("p",null,"This should print:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[7]: "Dort hatte er einen Hut gekauft." \u2192 ["Dort"/ADV, "hatte"/VAFIN, "er"/PPER, "einen"/ART, "Hut"/NN, "gekauft"/VVPP, "."/$.]\n')),(0,r.kt)("h3",{id:"-in-ukrainian"},"... in Ukrainian"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('pos-ukrainian')\n\n# make a sentence\nsentence = Sentence(\"\u0421\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432 \u0417\u043d\u0430\u043c\u2019\u044f\u043d\u0446\u0456 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442\u044c \u043d\u0430\u0449\u0430\u0434\u043a\u0438 \u043f\u043e\u0435\u0442\u0430 \u2014 \u0440\u043e\u0434\u0438\u043d\u0430 \u0428\u043a\u043e\u0434\u0438.\")\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,r.kt)("h3",{id:"-in-arabic"},"... in Arabic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('ar-pos')\n\n# make a sentence\nsentence = Sentence('\u0639\u0645\u0631\u0648 \u0639\u0627\u062f\u0644\u064a \u0623\u0633\u062a\u0627\u0630 \u0644\u0644\u0627\u0642\u062a\u0635\u0627\u062f \u0627\u0644\u0633\u064a\u0627\u0633\u064a \u0627\u0644\u0645\u0633\u0627\u0639\u062f \u0641\u064a \u0627\u0644\u062c\u0627\u0645\u0639\u0629 \u0627\u0644\u0623\u0645\u0631\u064a\u0643\u064a\u0629  \u0628\u0627\u0644\u0642\u0627\u0647\u0631\u0629 .')\n\n# predict NER tags\ntagger.predict(sentence)\n\n# print sentence with predicted tags\nprint(sentence)\n")),(0,r.kt)("h2",{id:"understanding-and-accessing-annotations-important"},"Understanding and Accessing Annotations (important!)"),(0,r.kt)("p",null,"You can access each prediction individually using the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_labels()")," method. Let's use our standard UPOS example to\ntag a sentence: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.data import Sentence\n\n# load the model\ntagger = Classifier.load('upos')\n\n# make a sentence\nsentence = Sentence('George Washington went to Washington.')\n\n# predict NER tags\ntagger.predict(sentence)\n")),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_labels()")," method to iterate over all predictions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for label in sentence.get_labels():\n    print(label)\n")),(0,r.kt)("p",null,"This should print each token in the sentence, together with its part-of-speech tag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'Token[0]: "George" \u2192 PROPN (0.9998)\nToken[1]: "Washington" \u2192 PROPN (1.0)\nToken[2]: "went" \u2192 VERB (1.0)\nToken[3]: "to" \u2192 ADP (1.0)\nToken[4]: "Washington" \u2192 PROPN (1.0)\nToken[5]: "." \u2192 PUNCT (1.0)\n')),(0,r.kt)("p",null,"As you can see, each entity is printed, together with the predicted class. The confidence of the prediction is indicated as a score in brackets."),(0,r.kt)("p",null,"For each prediction, you can directly access the label value, it's score and the token text:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# iterate over all labels in the sentence\nfor label in sentence.get_labels():\n    # print label value and score\n    print(f'label.value is: \"{label.value}\"')\n    print(f'label.score is: \"{label.score}\"')\n    # access the data point to which label attaches and print its text\n    print(f'the text of label.data_point is: \"{label.data_point.text}\"\\n')\n")),(0,r.kt)("h2",{id:"tagging-a-whole-text-corpus"},"Tagging a Whole Text Corpus"),(0,r.kt)("p",null,"Often, you may want to tag an entire text corpus. In this case, you need to split the corpus into sentences and pass a\nlist of ",(0,r.kt)("inlineCode",{parentName:"p"},"Sentence")," objects to the ",(0,r.kt)("inlineCode",{parentName:"p"},".predict()")," method."),(0,r.kt)("p",null,"For instance, you can use the sentence splitter of segtok to split your text:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flair.nn import Classifier\nfrom flair.splitter import SegtokSentenceSplitter\n\n# example text with many sentences\ntext = \"This is a sentence. This is another sentence. I love Berlin.\"\n\n# initialize sentence splitter\nsplitter = SegtokSentenceSplitter()\n\n# use splitter to split text into list of sentences\nsentences = splitter.split(text)\n\n# predict tags for sentences\ntagger = Classifier.load('upos')\ntagger.predict(sentences)\n\n# iterate through sentences and print predicted labels\nfor sentence in sentences:\n    print(sentence)\n")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"mini_batch_size")," parameter of the ",(0,r.kt)("inlineCode",{parentName:"p"},".predict()")," method, you can set the size of mini batches passed to the\ntagger. Depending on your resources, you might want to play around with this parameter to optimize speed."),(0,r.kt)("h2",{id:"list-of-pos-models"},"List of POS Models"),(0,r.kt)("p",null,"We end this section with a list of all models we currently ship with Flair. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ID"),(0,r.kt)("th",{parentName:"tr",align:null},"Task"),(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Training Dataset"),(0,r.kt)("th",{parentName:"tr",align:null},"Accuracy"),(0,r.kt)("th",{parentName:"tr",align:null},"Contributor / Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/flair/pos-english"},"pos"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"English"),(0,r.kt)("td",{parentName:"tr",align:null},"Ontonotes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"98.19")," (Accuracy)"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/flair/pos-english-fast"},"pos-fast"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"English"),(0,r.kt)("td",{parentName:"tr",align:null},"Ontonotes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"98.1")," (Accuracy)"),(0,r.kt)("td",{parentName:"tr",align:null},"(fast model)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/flair/upos-english"},"upos"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging (universal)"),(0,r.kt)("td",{parentName:"tr",align:null},"English"),(0,r.kt)("td",{parentName:"tr",align:null},"Ontonotes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"98.6")," (Accuracy)"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/flair/upos-english-fast"},"upos-fast"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging (universal)"),(0,r.kt)("td",{parentName:"tr",align:null},"English"),(0,r.kt)("td",{parentName:"tr",align:null},"Ontonotes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"98.47")," (Accuracy)"),(0,r.kt)("td",{parentName:"tr",align:null},"(fast model)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/flair/upos-multi"},"pos-multi"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Multilingual"),(0,r.kt)("td",{parentName:"tr",align:null},"UD Treebanks"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"96.41")," (average acc.)"),(0,r.kt)("td",{parentName:"tr",align:null},"(12 languages)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/flair/upos-multi-fast"},"pos-multi-fast"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Multilingual"),(0,r.kt)("td",{parentName:"tr",align:null},"UD Treebanks"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"92.88")," (average acc.)"),(0,r.kt)("td",{parentName:"tr",align:null},"(12 languages)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/megantosh/flair-arabic-dialects-codeswitch-egy-lev"},"ar-pos"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Arabic (+dialects)"),(0,r.kt)("td",{parentName:"tr",align:null},"combination of corpora"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'de-pos'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"German"),(0,r.kt)("td",{parentName:"tr",align:null},"UD German - HDT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"98.50")," (Accuracy)"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'de-pos-tweets'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"German"),(0,r.kt)("td",{parentName:"tr",align:null},"German Tweets"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"93.06")," (Accuracy)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/stefan-it/flair-experiments/tree/master/pos-twitter-german"},"stefan-it"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'da-pos'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Danish"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/UniversalDependencies/UD_Danish-DDT/blob/master/README.md"},"Danish Dependency Treebank")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/AmaliePauli"},"AmaliePauli"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'ml-pos'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Malayalam"),(0,r.kt)("td",{parentName:"tr",align:null},"30000 Malayalam sentences"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"83")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/sabiqueqb"},"sabiqueqb"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'ml-upos'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Malayalam"),(0,r.kt)("td",{parentName:"tr",align:null},"30000 Malayalam sentences"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"87")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/sabiqueqb"},"sabiqueqb"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'pt-pos-clinical'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Portuguese"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/HAILab-PUCPR/portuguese-clinical-pos-tagger"},"PUCPR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"92.39")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/LucasFerroHAILab"},"LucasFerroHAILab")," for clinical texts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'",(0,r.kt)("a",{parentName:"td",href:"https://huggingface.co/dchaplinsky/flair-uk-pos"},"pos-ukrainian"),"'"),(0,r.kt)("td",{parentName:"tr",align:null},"POS-tagging"),(0,r.kt)("td",{parentName:"tr",align:null},"Ukrainian"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://universaldependencies.org/treebanks/uk_iu/index.html"},"Ukrainian UD")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"97.93")," (F1)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/dchaplinsky"},"dchaplinsky"))))),(0,r.kt)("p",null,"You choose which pre-trained model you load by passing the appropriate string to the ",(0,r.kt)("inlineCode",{parentName:"p"},"load()")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Classifier")," class."),(0,r.kt)("p",null,"A full list of our current and community-contributed models can be browsed on the ",(0,r.kt)("a",{parentName:"p",href:"https://huggingface.co/models?library=flair&sort=downloads"},(0,r.kt)("strong",{parentName:"a"},"model hub")),"."))}u.isMDXComponent=!0}}]);