"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1627],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=a.createContext({}),c=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(r.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,s=e.originalType,r=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),h=l,k=d["".concat(r,".").concat(h)]||d[h]||u[h]||s;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var s=t.length,o=new Array(s);o[0]=h;var i={};for(var r in n)hasOwnProperty.call(n,r)&&(i[r]=n[r]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const s={sidebar_position:1},o="Basics",i={unversionedId:"tutorial-basics/basic-types",id:"tutorial-basics/basic-types",title:"Basics",description:"We first explain the base types used in this library.",source:"@site/docs/tutorial-basics/basic-types.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/basic-types",permalink:"/docs/tutorial-basics/basic-types",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/basic-types.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial 1: Basic Tagging",permalink:"/docs/category/tutorial-1-basic-tagging"},next:{title:"How predictions work",permalink:"/docs/tutorial-basics/how-predictions-work"}},r={},c=[{value:"Creating a Sentence",id:"creating-a-sentence",level:2},{value:"Tokenization",id:"tokenization",level:2},{value:"Adding Labels",id:"adding-labels",level:2},{value:"Adding labels to tokens",id:"adding-labels-to-tokens",level:3},{value:"Accessing Label information",id:"accessing-label-information",level:3},{value:"Adding labels to sentences",id:"adding-labels-to-sentences",level:3},{value:"Multiple labels",id:"multiple-labels",level:3},{value:"Accessing a sentence&#39;s labels",id:"accessing-a-sentences-labels",level:3}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,l.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"basics"},"Basics"),(0,l.kt)("p",null,"We first explain the base types used in this library."),(0,l.kt)("h2",{id:"creating-a-sentence"},"Creating a Sentence"),(0,l.kt)("p",null,"There are two types of objects that are central to this library, namely the ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Token")," objects. A\n",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," holds a textual sentence and is essentially a list of ",(0,l.kt)("inlineCode",{parentName:"p"},"Token"),"."),(0,l.kt)("p",null,"Let's start by making a ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," object for an example sentence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# The sentence objects holds a sentence that we may want to embed or tag\nfrom flair.data import Sentence\n\n# Make a sentence object by passing a string\nsentence = Sentence('The grass is green.')\n\n# Print the object to see what's in there\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence[5]: "The grass is green."\n')),(0,l.kt)("p",null,"The print-out tells us that the sentence consists of 5 tokens.\nYou can access the tokens of a sentence via their token id or with their index:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# using the token id\nprint(sentence.get_token(4))\n# using the index itself\nprint(sentence[3])\n")),(0,l.kt)("p",null,"which should print in both cases"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[3]: "green"\n')),(0,l.kt)("p",null,'This print-out includes the token index (3) and the lexical value of the token ("green"). You can also iterate over all\ntokens in a sentence.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for token in sentence:\n    print(token)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[0]: "The"\nToken[1]: "grass"\nToken[2]: "is"\nToken[3]: "green"\nToken[4]: "."\n')),(0,l.kt)("h2",{id:"tokenization"},"Tokenization"),(0,l.kt)("p",null,"When you create a ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence")," as above, the text is automatically tokenized (segmented into words)\nusing ",(0,l.kt)("a",{parentName:"p",href:"https://pypi.org/project/segtok/"},"segtok"),". "),(0,l.kt)("h2",{id:"adding-labels"},"Adding Labels"),(0,l.kt)("p",null,"In Flair, any data point can be labeled. For instance, you can label a word or label a sentence:"),(0,l.kt)("h3",{id:"adding-labels-to-tokens"},"Adding labels to tokens"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Token")," has fields for linguistic annotation, such as lemmas, part-of-speech tags or named entity tags. You can\nadd a tag by specifying the tag type and the tag value. In this example, we're adding an NER tag of type 'color' to\nthe word 'green'. This means that we've tagged this word as an entity of type color."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# add a tag to a word in the sentence\nsentence[3].set_label('ner', 'color')\n\n# print the sentence (now with this annotation)\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence: "The grass is green ." \u2192 ["green"/color]\n')),(0,l.kt)("p",null,'The output indicates that the word "green" in this sentence is labeled as a "color". You can also\niterate through each token and print it to see if it has labels:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for token in sentence:\n    print(token)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[0]: "The"\nToken[1]: "grass"\nToken[2]: "is"\nToken[3]: "green" \u2192 color (1.0)\nToken[4]: "."\n')),(0,l.kt)("p",null,"This shows that there are 5 tokens in the sentence, one of which has a label."),(0,l.kt)("h3",{id:"accessing-label-information"},"Accessing Label information"),(0,l.kt)("p",null,"Each label is of class ",(0,l.kt)("inlineCode",{parentName:"p"},"Label")," which next to the value has a score indicating confidence. Print like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# get and print token 3 in the sentence\ntoken = sentence[3]\nprint(token)\n\n# get the 'ner' label of the token\nlabel = token.get_label('ner')\n\n# print text and id fields of the token, and the value and score fields of the label\nprint(f'token.text is: \"{token.text}\"')\nprint(f'token.idx is: \"{token.idx}\"')\nprint(f'label.value is: \"{label.value}\"')\nprint(f'label.score is: \"{label.score}\"')\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Token[3]: "green" \u2192 color (1.0)\n\ntoken.text is: "green"\ntoken.idx is: "4"\nlabel.value is: "color"\nlabel.score is: "1.0"\n')),(0,l.kt)("p",null,"Our color tag has a score of 1.0 since we manually added it. If a tag is predicted by our\nsequence labeler, the score value will indicate classifier confidence."),(0,l.kt)("h3",{id:"adding-labels-to-sentences"},"Adding labels to sentences"),(0,l.kt)("p",null,"You can also add a ",(0,l.kt)("inlineCode",{parentName:"p"},"Label")," to a whole ",(0,l.kt)("inlineCode",{parentName:"p"},"Sentence"),".\nFor instance, the example below shows how we add the label 'sports' to a sentence, thereby labeling it\nas belonging to the sports \"topic\"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('France is the current world cup winner.')\n\n# add a label to a sentence\nsentence.add_label('topic', 'sports')\n\nprint(sentence)\n\n# Alternatively, you can also create a sentence with label in one line\nsentence = Sentence('France is the current world cup winner.').add_label('topic', 'sports')\n\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence: "France is the current world cup winner ." \u2192 sports (1.0)\n')),(0,l.kt)("p",null,"Indicating that this sentence belongs to the topic 'sports' with confidence 1.0."),(0,l.kt)("h3",{id:"multiple-labels"},"Multiple labels"),(0,l.kt)("p",null,"Any data point can be labeled multiple times. A sentence for instance might belong to two topics. In this case, add two labels with the same label name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('France is the current world cup winner.')\n\n# this sentence has multiple topic labels\nsentence.add_label('topic', 'sports')\nsentence.add_label('topic', 'soccer')\n")),(0,l.kt)("p",null,'You might want to add different layers of annotation for the same sentence. Next to topic you might also want to predict the "language" of a sentence. In this case, add a label with a different label name:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sentence = Sentence('France is the current world cup winner.')\n\n# this sentence has multiple \"topic\" labels\nsentence.add_label('topic', 'sports')\nsentence.add_label('topic', 'soccer')\n\n# this sentence has a \"language\" label\nsentence.add_label('language', 'English')\n\nprint(sentence)\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'Sentence: "France is the current world cup winner ." \u2192 sports (1.0); soccer (1.0); English (1.0)\n')),(0,l.kt)("p",null,"Indicating that this sentence now has three labels."),(0,l.kt)("h3",{id:"accessing-a-sentences-labels"},"Accessing a sentence's labels"),(0,l.kt)("p",null,"You can access these labels like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for label in sentence.labels:\n    print(label)\n")),(0,l.kt)("p",null,"Remember that each label is a ",(0,l.kt)("inlineCode",{parentName:"p"},"Label")," object, so you can also access the label's ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"score")," fields directly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(sentence.to_plain_string())\nfor label in sentence.labels:\n    print(f' - classified as \"{label.value}\" with score {label.score}')\n")),(0,l.kt)("p",null,"This should print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'France is the current world cup winner.\n - classified as "sports" with score 1.0\n - classified as "soccer" with score 1.0\n - classified as "English" with score 1.0\n')),(0,l.kt)("p",null,"If you are interested only in the labels of one layer of annotation, you can access them like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for label in sentence.get_labels('topic'):\n    print(label)\n")),(0,l.kt)("p",null,'Giving you only the "topic" labels.'))}u.isMDXComponent=!0}}]);